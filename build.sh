#!/usr/bin/env bash

publish_repo=git@github.com:stvhay/stvhay.github.io.git


# These functions are used to mark the PDFs with the SHA-384 hash of the .tex
# file. This is used to detect if the .tex file is changed from what generated
# the PDF.
getpdfhash()   { exiftool -XMP-pdfx:texhash -b "$1"; }
getlatexhash() { openssl dgst -sha384 -r "$1" | cut -d ' ' -f 1; }
markpdf()
{
    local tex_file="$1"
    local pdf_file="${2:-${tex_file%.tex}.pdf}"
    local config; ! config=$(mktemp) && exit 1

    # configure exiftool to create the custom metadata
    {
        printf "%s\n" "%Image::ExifTool::UserDefined = ("
        printf "%s\n" "    'Image::ExifTool::XMP::pdfx' => {"
        printf "%s\n" "        texhash => { Writable => 'string' },"
        printf "%s\n" "    },"
        printf "%s\n" "); 1;"
    } > "$config"

    ! hash=$(getlatexhash "$tex_file") && exit 1
    if ! exiftool -config "$config" \
        -XMP-pdfx:texhash="$hash" \
        "$pdf_file" >/dev/null
    then
        return 1
    fi
    rm -f "${pdf_file}_original"
    rm -f "$config"
}



# Process command line arguments
pretty_enabled=true
for arg in "$@"
do
    case $arg in
        --no-pretty)
            pretty_enabled=false
            shift
        ;;
    esac
done



# initialize generated website directory "public"
if [[ ! -d public ]]
then
    echo "Cloning repository..."
    git clone "$publish_repo" public
else
    echo "Resetting and pulling repository..."
    git -C public reset --hard HEAD >/dev/null
    git -C public pull >/dev/null
fi

if [[ -d public/.git ]] # website directory is a git repository
then
    # - .gitignore is not created by Hugo
    # - pdf files need special treatment because they change hash each build
    echo "Cleaning and preparing repository..."
    git -C public rm -rf --cached . >/dev/null
    git -C public clean -fd >/dev/null
    git -C public checkout main .gitignore 2>/dev/null

    # read from the manifest
    while IFS= read -r tex_file
    do
        pdf_file="${tex_file%.tex}.pdf"
        git -C public checkout main "docs/$pdf_file" 2>/dev/null
    done < latex/latex.manifest
else
    rm -rf public/*
fi



# Build LaTeX documents
echo "Building LaTeX documents..."
base_dir=$(pwd)
mkdir -pv latex
cd "${base_dir}/latex" || exit 1

# read from the manifest and build what has changed
while IFS= read -r texfile
do
    current_hash=$(getlatexhash "$texfile")
    previous_hash=$(getpdfhash "${base_dir}/public/docs/${texfile%.tex}.pdf")
    if [[ "$current_hash" != "$previous_hash" ]]
    then
        echo "Building: $texfile"
        texdir=$(dirname "$texfile")
        filename=$(basename "$texfile")
        
        cd "$texdir" >/dev/null || continue
        
        latexmk -quiet -pdf "$filename" >/dev/null
        latexmk -c >/dev/null
        rm -f "${filename%.tex}".{dvi,bbl} ./*.fls
        
        mkdir -p "${base_dir}/static/docs/$texdir"
        markpdf "$filename"
        mv "${filename%.tex}.pdf" "${base_dir}/static/docs/$texdir/"
        cd - >/dev/null || continue
    else
        echo "Skipping: $texfile (unchanged)"
    fi
done < latex.manifest
cd "${base_dir}" || exit 1



# Build website
echo "Building website..."
hugo || exit 1
if $pretty_enabled
then
    echo "Formatting content..."
    npx prettier public --write --ignore-path=.prettierignore || exit 1
fi



# Clean any built .pdf files from the working directory.
# These files are used by Hugo but not checked into git because they are
# generated by the build process from .tex documents.
while IFS= read -r texfile
do
    rm -f static/docs/"${texfile%.tex}.pdf" 
done < latex/latex.manifest



# Stage changes; show status
echo '+-----------------------+'
echo '| Hugo                  |'
echo '+-----------------------+'
git status
if [[ -d public/.git  ]]
then
    git -C public add --all >/dev/null
    echo '+-----------------------+'
    echo '| Website               |'
    echo '+-----------------------+'
    git -C public status
fi
